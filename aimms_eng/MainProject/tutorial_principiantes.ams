## ams_version=1.0

Model Main_tutorial_principiantes {
    Set Plants {
        Index: p;
    }
    Set Customers {
        Index: c;
    }
    Parameter Supply {
        IndexDomain: p;
    }
    Parameter Demand {
        IndexDomain: c;
    }
    Parameter UnitTransportCost {
        IndexDomain: (p,c);
    }
    Variable Transport {
        IndexDomain: (p,c);
        Range: nonnegative;
        Property: ReducedCost, CoefficientRange;
    }
    Variable TotalTransportCost {
        Range: free;
        Definition: {
            sum((p,c), UnitTransportCost(p, c)*
            Transport(p, c))
        }
    }
    Constraint SupplyConstraint {
        IndexDomain: p;
        Property: ShadowPrice, RightHandSideRange;
        Definition: sum(c, Transport(p, c))<=Supply(p);
    }
    Constraint DemandConstraint {
        IndexDomain: c;
        Property: ShadowPrice, RightHandSideRange;
        Definition: sum(p, Transport(p, c))>=Demand(c);
    }
    MathematicalProgram MinTransportCost {
        Objective: TotalTransportCost;
        Direction: minimize;
        Constraints: AllConstraints;
        Variables: AllVariables;
        Type: Automatic;
    }
    DeclarationSection Sensibiity {
        Parameter ShadowPriceSupply {
            IndexDomain: p;
            Definition: SupplyConstraint(p).shadowprice;
        }
        Parameter ShadowPriceDemand {
            IndexDomain: c;
            Definition: DemandConstraint(c).shadowprice;
        }
        Parameter RHSSupplyInf {
            IndexDomain: p;
            Definition: SupplyConstraint.SmallestRightHandSide(p);
        }
        Parameter RHSSupplySup {
            IndexDomain: p;
            Definition: SupplyConstraint.LargestRightHandSide(p);
        }
        Parameter RHSDemandInf {
            IndexDomain: c;
            Definition: DemandConstraint.SmallestRightHandSide(c);
        }
        Parameter RHSDemandSup {
            IndexDomain: c;
            Definition: DemandConstraint.LargestRightHandSide(c);
        }
        Parameter ReducedCostTransp {
            IndexDomain: (p,c);
            Definition: Transport.ReducedCost(p, c);
        }
        Parameter CoeffTransportInf {
            IndexDomain: (p,c);
            Definition: Transport.SmallestCoefficient(p, c);
        }
        Parameter CoeffTransportSup {
            IndexDomain: (p,c);
            Definition: Transport.LargestCoefficient(p, c);
        }
        Parameter PlantShipping {
            IndexDomain: p;
            Definition: sum(c, Transport(p, c));
        }
        Parameter CustomerReceived {
            IndexDomain: c;
            Definition: sum(p, Transport(p, c));
        }
    }
    Procedure MainInitialization {
        Comment: "Add initialization statements here that do NOT require any library being initialized already.";
    }
    Procedure PostMainInitialization {
        Comment: {
            "Add initialization statements here that require that the libraries are already initialized properly,
            or add statements that require the Data Management module to be initialized."
        }
    }
    Procedure MainExecution {
        Body: {
            empty AllVariables;
            ShowProgressWindow;
            solve MinTransportCost;
        }
    }
    Procedure PreMainTermination {
        Body: {
            return DataManagementExit();
        }
        Comment: {
            "Add termination statements here that require all libraries to be still alive.
            Return 1 if you allow the termination sequence to continue.
            Return 0 if you want to cancel the termination sequence."
        }
    }
    Procedure MainTermination {
        Body: {
            return 1;
        }
        Comment: {
            "Add termination statements here that do not require all libraries to be still alive.
            Return 1 to allow the termination sequence to continue.
            Return 0 if you want to cancel the termination sequence.
            It is recommended to only use the procedure PreMainTermination to cancel the termination sequence and let this procedure always return 1."
        }
    }
}
